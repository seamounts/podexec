// Code generated by MockGen. DO NOT EDIT.
// Source: wsconnecter.go

// Package socketstream is a generated GoMock package.
package socketstream

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockwsconnecter is a mock of wsconnecter interface
type Mockwsconnecter struct {
	ctrl     *gomock.Controller
	recorder *MockwsconnecterMockRecorder
}

// MockwsconnecterMockRecorder is the mock recorder for Mockwsconnecter
type MockwsconnecterMockRecorder struct {
	mock *Mockwsconnecter
}

// NewMockwsconnecter creates a new mock instance
func NewMockwsconnecter(ctrl *gomock.Controller) *Mockwsconnecter {
	mock := &Mockwsconnecter{ctrl: ctrl}
	mock.recorder = &MockwsconnecterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockwsconnecter) EXPECT() *MockwsconnecterMockRecorder {
	return m.recorder
}

// ReadMessage mocks base method
func (m *Mockwsconnecter) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage
func (mr *MockwsconnecterMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*Mockwsconnecter)(nil).ReadMessage))
}

// WriteMessage mocks base method
func (m *Mockwsconnecter) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage
func (mr *MockwsconnecterMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*Mockwsconnecter)(nil).WriteMessage), messageType, data)
}
